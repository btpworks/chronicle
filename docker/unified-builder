# syntax = docker/dockerfile:1.4
# Copyright (c) 2022-23 Blockchain Technology Partners, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM rust:1.65 as base

ARG TARGETPLATFORM
ENV TARGETPLATFORM=${TARGETPLATFORM}
ENV DEBIAN_FRONTEND=noninteractive
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true

RUN --mount=type=cache,target=/var/cache/apt \
  apt-get update && \
  apt-get install -y \
  build-essential \
  cmake \
  gcc-x86-64-linux-gnu \
  g++-x86-64-linux-gnu \
  gcc-aarch64-linux-gnu \
  g++-aarch64-linux-gnu \
  libssl-dev \
  libzmq3-dev \
  protobuf-compiler \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

ENV VERSION=AUTO_STRICT

ENV PATH=$PATH:/root/.cargo/bin

RUN rustup target add x86_64-unknown-linux-gnu && rustup target add aarch64-unknown-linux-gnu

WORKDIR /app

FROM base AS test

ARG BUILD_ARGS
COPY Cargo.lock /app
COPY .cargo /app/.cargo
COPY Cargo.toml /app
COPY crates /app/crates

# Test on the host only
# PostgreSQL will not run as root
RUN useradd -m tester
RUN chown -R tester .
USER tester
RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
  TARGET=aarch64-unknown-linux-gnu; \
  elif [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
  TARGET=x86_64-unknown-linux-gnu; \
  else \
  echo "Unsupported architecture: $(TARGETPLATFORM)"; \
  exit 1; \
  fi &&\
  cargo test --release --target $TARGET
USER root


FROM test AS tested

ARG BUILD_ARGS

# Build for both target and host
RUN dpkg --add-architecture amd64
RUN dpkg --add-architecture arm64
RUN --mount=type=cache,target=/var/cache/apt \
  apt-get update && \
  mkdir -p /artifacts/amd64 && \
  mkdir -p /artifacts/arm64 && \
  apt-get remove -y libpq-dev && \
  apt-get install -y liblzma-dev:arm64 libpq-dev:arm64 && \
  cargo build --target aarch64-unknown-linux-gnu --release ${BUILD_ARGS} \
  && mv -f target/aarch64-unknown-linux-gnu/release/chronicle /artifacts/arm64 \
  && mv -f target/aarch64-unknown-linux-gnu/release/chronicle_sawtooth_tp /artifacts/arm64 \
  && mv -f target/aarch64-unknown-linux-gnu/release/chronicle-domain-lint /artifacts/arm64 \
  && apt-get remove -y libpq-dev \
  && apt-get install -y liblzma-dev:amd64 libpq-dev:amd64 \
  && cargo build --target x86_64-unknown-linux-gnu --release ${BUILD_ARGS} \
  && mv -f target/x86_64-unknown-linux-gnu/release/chronicle /artifacts/amd64 \
  && mv -f target/x86_64-unknown-linux-gnu/release/chronicle_sawtooth_tp /artifacts/amd64 \
  && mv -f target/x86_64-unknown-linux-gnu/release/chronicle-domain-lint /artifacts/amd64

FROM  alpine:3.16.3 as tested-artifacts
COPY --from=tested --link /artifacts /artifacts

# Copy linter to a rustc image for the build platform
FROM rust:1.65 as chronicle-builder

ARG TARGETARCH
ENV DEBIAN_FRONTEND=noninteractive
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true

RUN apt-get update && \
  apt-get install -y \
  build-essential \
  cmake \
  libpq-dev \
  libssl-dev \
  libzmq3-dev \
  protobuf-compiler \
  && \
  apt-get clean && rm -rf /var/lib/apt/lists/*

COPY .artifacts/artifacts/${TARGETARCH}/chronicle-domain-lint /usr/local/bin

WORKDIR /app
COPY .cargo /app/.cargo
COPY Cargo.lock /app
COPY Cargo.toml /app
COPY crates /app/crates
RUN cargo fetch --locked


# Copy untyped chronicle to image
FROM debian:bullseye-slim AS chronicle
ARG TARGETARCH
WORKDIR /

RUN groupadd -g 999 chronicle && \
  useradd -m -r -u 999 -g chronicle chronicle

RUN apt-get update && \
  apt-get install -y \
  libpq5 \
  ca-certificates \
  && \
  apt-get clean && rm -rf /var/lib/apt/lists/*

COPY .artifacts/artifacts/${TARGETARCH}/chronicle /usr/local/bin

VOLUME /var/lib/chronicle

RUN mkdir -p /var/lib/chronicle \
  && chown root:bin /usr/local/bin/chronicle \
  && chown -R chronicle:chronicle /var/lib/chronicle \
  && chmod 755 /usr/local/bin/chronicle /var/lib/chronicle

USER chronicle

# Copy tp to image
FROM debian:bullseye-slim AS chronicle-tp
ARG TARGETARCH
WORKDIR /

RUN groupadd -g 999 chronicle && \
  useradd -m -r -u 999 -g chronicle chronicle

COPY .artifacts/artifacts/${TARGETARCH}/chronicle_sawtooth_tp /usr/local/bin

RUN mkdir -p /var/lib/chronicle \
  && chown root:bin /usr/local/bin/chronicle_sawtooth_tp \
  && chown -R chronicle:chronicle /var/lib/chronicle \
  && chmod 755 /usr/local/bin/chronicle_sawtooth_tp /var/lib/chronicle

USER chronicle
