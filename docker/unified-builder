# syntax = docker/dockerfile:1.4
# Copyright 2022 Blockchain Technology Partners, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM --platform=$TARGETPLATFORM rust:1.65 as base

ENV DEBIAN_FRONTEND=noninteractive
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true
ARG SCCACHE_VERSION=0.3.0

RUN --mount=type=cache,target=/var/cache/apt \
  apt-get update && \
  apt-get install -y \
  build-essential \
  gcc-x86-64-linux-gnu \
  g++-x86-64-linux-gnu \
  gcc-aarch64-linux-gnu \
  g++-aarch64-linux-gnu \
  cmake \
  libzmq3-dev \
  libssl-dev \
  protobuf-compiler \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN wget https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl.tar.gz \
  && tar xzf sccache-v${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl.tar.gz \
  && mv sccache-v${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl/sccache /usr/local/bin/sccache \
  && chmod +x /usr/local/bin/sccache \
  && rm -f sccache-v${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl.tar.gz

ENV RUSTC_WRAPPER=/usr/local/bin/sccache
ENV SCCACHE_DIR=/var/cache/buildkit/sccache
RUN mkdir -p $SCCACHE_DIR

ENV VERSION=AUTO_STRICT

ENV PATH=$PATH:/root/.cargo/bin

RUN rustup target add x86_64-unknown-linux-gnu && rustup target add aarch64-unknown-linux-gnu

WORKDIR /app

FROM --platform=$TARGETPLATFORM base AS test

ARG BUILD_ARGS
COPY Cargo.lock /app
COPY .cargo /app/.cargo
COPY Cargo.toml /app
COPY crates /app/crates

# Build for both target and host, but only test on host
RUN cargo test --release
# Dump sccache hits


FROM --platform=$TARGETPLATFORM test AS tested

ARG BUILD_ARGS

# Build for both target and host, but only test on host
RUN  mkdir -p /artifacts/amd64 && \
  mkdir -p /artifacts/arm64 && \
  cargo build --target aarch64-unknown-linux-gnu --release ${BUILD_ARGS} \
  && mv -f target/aarch64-unknown-linux-gnu/release/chronicle /artifacts/arm64 \
  && mv -f target/aarch64-unknown-linux-gnu/release/chronicle_sawtooth_tp /artifacts/arm64 \
  && mv -f target/aarch64-unknown-linux-gnu/release/chronicle-domain-lint /artifacts/arm64 \
  && cargo build --target x86_64-unknown-linux-gnu --release ${BUILD_ARGS} \
  && mv -f target/x86_64-unknown-linux-gnu/release/chronicle /artifacts/amd64 \
  && mv -f target/x86_64-unknown-linux-gnu/release/chronicle_sawtooth_tp /artifacts/amd64 \
  && mv -f target/x86_64-unknown-linux-gnu/release/chronicle-domain-lint /artifacts/amd64

FROM  alpine:3.16.3 as tested-artifacts
COPY --from=tested --link /artifacts /artifacts

# Copy linter to a rustc image for the build platform
FROM rust:1.65 as chronicle-builder

ARG TARGETARCH
ENV DEBIAN_FRONTEND=noninteractive
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true

RUN apt-get update && \
  apt-get install -y \
  build-essential \
  cmake \
  libzmq3-dev \
  libssl-dev \
  protobuf-compiler \
  && \
  apt-get clean && rm -rf /var/lib/apt/lists/*

COPY .artifacts/artifacts/${TARGETARCH}/chronicle-domain-lint /usr/local/bin

WORKDIR /app
COPY Cargo.lock /app
COPY Cargo.toml /app
COPY crates /app/crates
RUN cargo fetch --locked


# Copy untyped chronicle to image
FROM ubuntu:focal@sha256:450e066588f42ebe1551f3b1a535034b6aa46cd936fe7f2c6b0d72997ec61dbd AS chronicle
ARG TARGETARCH
WORKDIR /
COPY .artifacts/artifacts/${TARGETARCH}/chronicle /usr/local/bin

# Copy tp to image
FROM ubuntu:focal@sha256:450e066588f42ebe1551f3b1a535034b6aa46cd936fe7f2c6b0d72997ec61dbd AS chronicle-tp
ARG TARGETARCH
WORKDIR /
COPY .artifacts/artifacts/${TARGETARCH}/chronicle_sawtooth_tp /usr/local/bin
