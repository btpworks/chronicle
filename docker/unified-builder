# syntax = docker/dockerfile:1.2
# Copyright 2022 Blockchain Technology Partners, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM --platform=$BUILDPLATFORM rust:latest as base

ARG BUILDPLATFORM
ARG TARGETARCH
ARG BUILD_ARGS

ENV DEBIAN_FRONTEND=noninteractive
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true
ARG SCCACHE_VERSION=0.3.0

RUN apt-get update && \
  apt-get install -y \
  build-essential \
  cmake \
  libzmq3-dev \
  libssl-dev \
  protobuf-compiler \
  && \
  apt-get clean && rm -rf /var/lib/apt/lists/*

RUN wget https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl.tar.gz \
  && tar xzf sccache-v${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl.tar.gz \
  && mv sccache-v${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl/sccache /usr/local/bin/sccache \
  && chmod +x /usr/local/bin/sccache \
  && rm -f sccache-v${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl.tar.gz

ENV RUSTC_WRAPPER=/usr/local/bin/sccache
ENV SCCACHE_DIR=/var/cache/buildkit/sccache
RUN mkdir -p $SCCACHE_DIR

ENV VERSION=AUTO_STRICT

ENV PATH=$PATH:/root/.cargo/bin

RUN if [ "$TARGETARCH" = "amd64" ]; then \
  TARGET=x86_64-unknown-linux-gnu; \
  elif [ "$TARGETARCH" = "arm64" ]; then \
  TARGET=aarch64-unknown-linux-gnu; \
  else \
  echo "Unsupported architecture: $TARGETARCH"; \
  exit 1; \
  fi \
  && rustup target add "${TARGET}"

WORKDIR /app

# Layer with cargo cache
FROM base AS index
COPY Cargo.lock /app
COPY Cargo.toml /app
COPY crates /app/crates
RUN cargo fetch

FROM index AS tested
# Test if host == target and build for target architecture
RUN --mount=type=cache,target=/var/cache/buildkit/sccache  \
  if [ "$TARGETARCH" = "amd64" ]; then \
  TARGET=x86_64-unknown-linux-gnu; \
  elif [ "$TARGETARCH" = "arm64" ]; then \
  TARGET=aarch64-unknown-linux-gnu; \
  else \
  echo "Unsupported architecture: $TARGETARCH"; \
  exit 1; \
  fi \
  && cargo clean \
  && if [ "$BUILDPLATFORM" = "$TARGETPLATFORM" ]; then \
  cargo test --release --target "${TARGET}"; \
  fi \
  && cargo build --target "${TARGET}" --release ${BUILD_ARGS} \
  && mv -f "target/${TARGET}" "target/${TARGETARCH}"
# Dump sccache hits
RUN --mount=type=cache,target=/var/cache/buildkit/sccache \
  sccache -s



# Copy linter to a rustc image for the build platform
FROM --platform=linux/arm64 rust:latest as chronicle-builder-arm64

ENV DEBIAN_FRONTEND=noninteractive
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true

RUN apt-get update && \
  apt-get install -y \
  build-essential \
  cmake \
  libzmq3-dev \
  libssl-dev \
  protobuf-compiler \
  && \
  apt-get clean && rm -rf /var/lib/apt/lists/*

ENV PATH=$PATH:/root/.cargo/bin

COPY --from=tested /app/target/arm64/release/chronicle-domain-lint /usr/local/bin
WORKDIR /app
COPY Cargo.lock /app
COPY Cargo.toml /app
COPY crates /app/crates
RUN cargo fetch --locked

# Copy linter to a rustc image for the build platform
FROM --platform=linux/arm64 rust:latest as chronicle-builder-amd64

ENV DEBIAN_FRONTEND=noninteractive
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true

RUN apt-get update && \
  apt-get install -y \
  build-essential \
  cmake \
  libzmq3-dev \
  libssl-dev \
  protobuf-compiler \
  && \
  apt-get clean && rm -rf /var/lib/apt/lists/*

ENV PATH=$PATH:/root/.cargo/bin

COPY --from=tested /app/target/amd64/release/chronicle-domain-lint /usr/local/bin
WORKDIR /app
COPY Cargo.lock /app
COPY Cargo.toml /app
COPY crates /app/crates
RUN cargo fetch --locked

# Copy untyped chronicle to image
FROM --platform=linux/arm64 ubuntu:focal AS chronicle-arm64
WORKDIR /
COPY --from=tested /app/target/arm64/release/chronicle /usr/local/bin

# Copy untyped chronicle to image
FROM --platform=linux/amd64 ubuntu:focal AS chronicle-amd64
WORKDIR /
COPY --from=tested /app/target/amd54/release/chronicle /usr/local/bin

# Copy tp to image
FROM --platform=linux/amd64 ubuntu:focal AS chronicle-tp-amd64
ARG TARGETARCH
WORKDIR /
COPY --from=tested /app/target/amd64/release/chronicle_sawtooth_tp /usr/local/bin

# Copy tp to image
FROM --platform=linux/arm64 ubuntu:focal AS chronicle-tp-arm64
ARG TARGETARCH
WORKDIR /
COPY --from=tested /app/target/arm64/release/chronicle_sawtooth_tp /usr/local/bin
